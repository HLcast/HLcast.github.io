{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"HLcast","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"matter","slug":"matter","date":"2018-11-12T05:19:35.000Z","updated":"2018-11-12T05:38:55.621Z","comments":true,"path":"2018/11/12/matter/","link":"","permalink":"http://yoursite.com/2018/11/12/matter/","excerpt":"","text":"一、git 解决fatal: Not a git repository1.1我用git add file添加文件时出现这样错误：fatal: Not a git repository (or any of the parent directories): .git 提示说没有.git这样一个目录，解决办法如下： git init就可以了！ 1.2部署命令：1&gt;hexo new post “文件名” 2&gt;hexo g //生成网页 3&gt;hexo s //部署到本地服务器 4&gt;hexo d //部署到远端(github) 二、MD(markdown)语法:优点： 1&gt;、因为是纯文本，所以只要支持markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。 2&gt;、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而markdown只需要在标题内容前加#即可 缺点： 1&gt;、需要记一些语法（当然，是很简单。五分钟学会）。 2&gt;、有些平台不支持markdown编辑模式。 1.1标题在想要设置为标题的文字前面加#来表示 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。 示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题","categories":[],"tags":[{"name":"不能把文件部署到Githup问题","slug":"不能把文件部署到Githup问题","permalink":"http://yoursite.com/tags/不能把文件部署到Githup问题/"}]},{"title":"spring(三大框架)","slug":"spring-三大框架","date":"2018-11-11T13:44:37.000Z","updated":"2018-11-11T14:11:51.771Z","comments":true,"path":"2018/11/11/spring-三大框架/","link":"","permalink":"http://yoursite.com/2018/11/11/spring-三大框架/","excerpt":"","text":"一、Sping&emsp;&emsp;Spring 是一个开源框架，为简化企业级应用开发而生。Spring 可以是使简单的 JavaBean 实现以前只有 EJB 才能实现的功能。Spring 是一个 IOC 和 AOP 容器框架。 1.1Spring 容器的主要核心是：&emsp;&emsp;控制反转（IOC），传统的 java 开发模式中，当需要一个对象时，我们会自己使用 new 或者 getInstance 等直接或者间接调用构造方法创建一个对象。而在 spring 开发模式中，spring 容器使用了工厂模式为我们创建了所需要的对象，不需要我们自己创建了，直接调用 spring 提供的对象就可以了，这是控制反转的思想。 &emsp;&emsp;面向切面编程（AOP），在面向对象编程（oop）思想中，我们将事物纵向抽成一个个的对象。而在面向切面编程中，我们将一个个的对象某些类似的方面横向抽成一个切面，对这个切面进行一些如权限控制、事物管理，记录日志等公用操作处理的过程就是面向切面编程的思想。AOP 底层是动态代理，如果是接口采用 JDK 动态代理，如果是类采用CGLIB 方式实现动态代理。 &emsp;&emsp;依赖注入（DI），spring 使用 javaBean 对象的 set 方法或者带参数的构造方法为我们在创建所需对象时将其属性自动设置所需要的值的过程，就是依赖注入的思想。 1.2搭建Spring框架:1&gt;添加依赖包（坐标） spring-context(5个) 2&gt;创建核心配置文件 3&gt;创建Srping IOC容器 ApplicationContext:单例（BeanFactory子接口） ClassPathXmlApplicationContext(bean.xml):（常用） FileSystemXmlApplicationContext():磁盘位置路径（不用考虑） AnnotationConfigApplicationContext():读取注解配置文件 BeanFactory:多例（不常用） 4&gt;根据ID获取Bean对象 ac.getBean(id,类的字节码) 5&gt;Bean创建方式 1.1&gt;默认构造函数实例化Bean对象 2.1&gt;工厂中的普通方法（返回对象的实例）：工厂的方式实例化Bean对象 123&lt;bean id=\"beanFactory\" class=\"com.itheima.factory.BeanFactory\"&gt;&lt;/bean&gt; &lt;bean id=\"user\" factory-bean=\"beanFactory\" factory-method=\"getUserInstance\"&gt;&lt;/bean&gt; ​ 3.1&gt;工厂中的静态方法（返回对象的实例） 1&lt;bean id=\"user\" class=\"com.itheima.factory.BeanFactory\" factory-method=\"getUserInstance\"&gt;&lt;/bean&gt; 6&gt;Bean的作用范围： scope：指定实例化Bean范围 singleton(默认) prototype {request session global-session} 1.3Spring 的常用注解:&emsp;&emsp;Spring 在 2.5 版本以后开始支持注解的方式来配置依赖注入。可以用注解的方式来代替 xml 中 bean 的描述。注解注入将会被容器在 XML 注入之前被处理，所以后者会覆盖掉前者对于同一个属性的处理结果。&emsp;&emsp;注解装配在 spring 中默认是关闭的。所以需要在 spring 的核心配置文件中配置一下才能使用基于注解的装配模式。配置方式如下：&emsp;&emsp;&lt;context:annotation-config /&gt;常用的注解：@Required:该注解应用于设值方法@Autowired：该注解应用于有值设值方法、非设值方法、构造方法和变量。@Qualifier：该注解和@Autowired 搭配使用，用于消除特定 bean 自动装配的歧义。 1.4简单介绍一下 Spring bean 的生命周期：bean 定义：在配置文件里面用来进行定义。 1&lt;bean&gt;&lt;/bean&gt; bean 初始化：有两种方式初始化:1.在配置文件中通过指定 init-method 属性来完成2.实现 org.springframwork.beans.factory.InitializingBean 接口bean 调用：有三种方式可以得到 bean 实例，并进行调用bean 销毁：销毁有两种方式1.使用配置文件指定的 destroy-method 属性2.实现 org.springframwork.bean.factory.DisposeableBean 接口","categories":[],"tags":[{"name":"SSM_Spring","slug":"SSM-Spring","permalink":"http://yoursite.com/tags/SSM-Spring/"}]},{"title":"Javasc","slug":"Javasc","date":"2018-11-11T13:37:05.000Z","updated":"2018-11-11T13:37:55.309Z","comments":true,"path":"2018/11/11/Javasc/","link":"","permalink":"http://yoursite.com/2018/11/11/Javasc/","excerpt":"","text":"Vue1 vue简介Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。和AngularJS的语法非常的相似。 Vue 的一些语法和 AngularJS 的很相似 (例如 v-if vs ng-if)。因为 AngularJS 是 Vue 早期开发的灵感来源。然而，AngularJS 中存在的许多问题，在 Vue 中已经得到解决。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]}]}